# -*- coding: utf-8 -*-
"""P1_Predictive Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sAm70E90XN_lFG-_ts6voCTr6SBIpPMa

<h1>Analisis Prediktif : Prediksi Harga Emas di Waktu yang Akan Datang</h1>

## Business Understanding

Dalam catatan sejarah, emas telah digunakan sebagai mata uang di berbagai belahan dunia. Saat ini, logam mulia seperti emas dipegang oleh bank sentral di semua negara untuk menjamin pembayaran kembali utang luar negeri, dan juga untuk mengendalikan inflasi yaang meencerminkan kekuatan keuanga negara. Baru-baru ini, negara berkembang seperti Cina, Rusia, dan India menjadi pembeli emas yang besar, sedangkan Amerika Serikat, Afrika Selatan, dan Australia termasuk diantara penjual emas yang besar.

Memprediksi kenaikan dan penurunan harga emas harian dapat membantu investor memutuskan kapan harus membeli atau menjual komoditas terseut. Tetapi harga emas bergantung pada banyak faktor seperti harga logam mulia lainnya seperti harga minyak mentah, kinerja bursa saham, harga obligasi, nilai tukar mata uang, dan sebagainya. 


<h3>Problem Statement dan Goals

Berdsarkan uraian diatas, investor  akan mengembangkan sebuah sistem prediksi harga emas untuk menjawab permasalahan berikut.

- Dari banyaknya fitur yang ada fitur manakah yang memiliki hubungan atau pengaruh terhadap data harga penjualan emas?
- Bagaimana cara pemrosesan data yang dapat dilakukan pada data harga penjualan emas?
- Bagaimana membuat model machine learning yang mampu memprediksi harga penjualan emas secara akurat?

Untuk menjawab pertanyaan tersebut, kita akan membuat sebuah model prediksi dengan tujuan sebagai berikut.

- Memilih fitur-fitur yang memiliki hubungan atau pengaruh terhadap data harga penjualan emas
- Melakukan pemrosesan terhadap data harga penjualan emas.
- Membuat model machine learning terbaik untuk memprediksi harga penjualan emas. 

<h3>Metodologi

Tujuan yang ingin dicapai adalah memprediksi harga emas. Harga emas merupakan variabel kontinu maka permasalahan yang dihadapi berupa permasalahan regresi. Sehingga metodologi yang cocok adalah membangun model regresi dengan harga emas sebagai target.

<h3>Metrik

Metrik digunakan untuk mengevaluasi model yang telah dibuat untuk memprediksi harga emas. Pada proyek ini metrik yang digunakan adalah Root Mean Square Error (RMSE) dan R2-Score. Secara umum, metrik ini mengukur seberapa akurat hasil prediksi dengan nilai sebenarnya. Akan dibahas lebih lanjut pada bagian evaluasi.

Model yang akan dikembangkan untuk prediksi menggunakan beberapa algorritma machine learning, yaitu Decision Tree Regression, Support Vector Regressor, Random Forest, LassoCV, RidgeCV, Gradient Boosting Regressor dan Stochastic Gradient Descent. Dari model-model tersebut, akan dipilih model terbaik yang memiliki nilai kesalahan prediksi terkecil dan memiliki akurasi yang baik.

## Data Understanding

### Data Loading

Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""Menambah Kredential Kaggle"""

!pip install kaggle
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Menggunduh Dataset dari Kaggle"""

!kaggle datasets download -d sid321axn/gold-price-prediction-dataset

"""Mengekstrak File Zip Dataset"""

!unzip '/content/gold-price-prediction-dataset.zip'

"""Memuat Dataset"""

golds = pd.read_csv('/content/FINAL_USO.csv', index_col='Date', parse_dates=True, infer_datetime_format=True)
golds

"""Output kode diatas berisi informasi:

- Terdapat 1718 baris dalam dataset.
- Terdapat 80 kolom, yaitu Open, High, Low, Close, Adj Close, Volume, SP_open, SP_high, SP_low, SP_close, SP_Ajclose, SP_volume, DJ_open, DJ_high, DJ_low, DJ_close, DJ_Ajclose, DJ_volume, EG_open, EG_high, EG_low, EG_close, EG_Ajclose, EG_volume, EU_Price, EU_open, EU_high, EU_low, EU_Trend, OF_Price, OF_Open, OF_High, OF_Low, OF_Volume, OF_Trend, OS_Price, OS_Open, OS_High, OS_Low, OS_Trend, SF_Price, SF_Open, SF_High, SF_Low, SF_Volume, SF_Trend, USB_Price, USB_Open, USB_High, USB_Low, USB_Trend, PLT_Price, PLT_Open, PLT_High, PLT_Low, PLT_Trend, PLD_Price, PLD_Open, PLD_High, PLD_Low, PLD_Trend, RHO_PRICE, USDI_Price, USDI_Open, USDI_High, USDI_Low, USDI_Volume, USDI_Trend, GDX_Open, GDX_High, GDX_Low, GDX_Close, GDX_Adj Close, GDX_Volume, USO_Open, USO_High, USO_Low, USO_Close, USO_Adj Close dan USO_Volume.

### Deskripsi Variabel

Berdasarkan informasi, variabel-variabel pada dataset sebagai berikut.

- Gold ETF, komoditas yang diperdagangkan seperti saham. Meski terdiri dari aset berupa emas, investor sebenarnya tidak memiliki komoditas fisiknya. Investasi emas ETF dikenakan biaya tambahan baik biaya broker dan penebusan ETF.
  - Open, harga pembukaan
  - High, harga tertinggi
  - Low,  harga terendah
  - Close, harga penutupan
  - Adj Close, harga penutupan yang telah disesuaikan ketika terjadi aksi korporasi perusahaan, dalam hal ini adalah deviden dan stock split.
  - Volume, menunjukkan jumlah perdagangan atau transaksi yang terjadi dalam perdagangan di suatu sesi.
- S&P 500 Index, indeks yang terdiri atas 500 saham dengan market capitalization terbesar di Amerika Serikat. Indeks ini dimiliki oleh Standard & Poor. Indeks saham S&P500 meliputi 80% dari kapitalisasi pasar di USA.
  - SP_open, harga pembukaan S&P 500 Index
  - SP_high, harga tertinggi S&P 500 Index
  - SP_low, harga terendah S&P 500 Index
  - SP_close, harga penutupan S&P 500 Index
  - SP_Ajclose, harga penutupan S&P 500 Index yang telah disesuaikan ketika terjadi aksi korporasi perusahaan, dalam hal ini adalah deviden dan stock split.
  - SP_volume, menunjukkan jumlah perdagangan atau transaksi S&P 500 Index yang terjadi dalam perdagangan di suatu sesi.
- Dow Jones Index, indeks pasar saham yang didirikan oleh editor The Wall Street Jurnal dan pendiri Dow Jones & Company Charles Cow. Bursa saham ini terdiri dari 30 perusahaan terbesar di Amerika Serikat.
  - DJ_open, harga pembukaan Dow Jones Index
  - DJ_high, harga tertinggi Dow Jones Index
  - DJ_low, harga terendah Dow Jones Index
  - DJ_close, harga penutupan Dow Jones Index
  - DJ_Ajclose, harga penutupan Dow Jones Index yang telah disesuaikan ketika terjadi aksi korporasi perusahaan, dalam hal ini adalah deviden dan stock split.
  - DJ_volume, menunjukkan jumlah perdagangan atau transaksi Dow Jones Index yang terjadi dalam perdagangan di suatu sesi.
- Eldorado Gold Corporation, perusahaan Kanada yang memiliki dan mengoperasikan tambang emas di Turki, Yunani, dan Kanada.
  - EG_open, harga pembukaan Eldorado Gold Corporation
  - EG_high, harga tertinggi Eldorado Gold Corporation
  - EG_low, harga terendah Eldorado Gold Corporation
  - EG_close, harga penutupan Eldorado Gold Corporation
  - EG_Ajclose, harga penutupan Eldorado Gold Corporation yang telah disesuaikan ketika terjadi aksi korporasi perusahaan, dalam hal ini adalah deviden dan stock split.
  - EG_volume, menunjukkan jumlah perdagangan atau transaksi Eldorado Gold Corporation yang terjadi dalam perdagangan di suatu sesi.
- EURO - USD Exchange Rate, Nilai tukar satuan mata uang Euro terhadap USD. 
  - EU_Price, harga jual
  - EU_open, harga pembukaan EURO - USD Exchange Rate
  - EU_high, harga tertinggi EURO - USD Exchange Rate
  - EU_low, harga terendah EURO - USD Exchange Rate
  - EU_Trend, rekam jejak harga EURO - USD Exchange Rate
- Brent Crude Oil Futures, harga patokan utama untuk pembelian minyak di seluruh dunia. Sementara minyak Brent Crude bersumber dari Laut Utara, produksi minyak yang berasal dari Eropa, Afrika dan Timur Tengah yang mengalir ke Barat cenderung dihargai relatif terhadap minyak ini.
  - OF_Price, harga jual Brent Crude Oil Futures
  - OF_Open, harga pembukaan Brent Crude Oil Futures
  - OF_High, harga tertinggi Brent Crude Oil Futures
  - OF_Low, harga terendah Brent Crude Oil Futures
  - OF_Volume, menunjukkan jumlah perdagangan atau transaksi Brent Crude Oil Futures yang terjadi dalam perdagangan di suatu sesi.
  - OF_Trend, rekam jejak harga Brent Crude Oil Futures
- Crude Oil WTI USD, West Texas Intermediate - Patokan WTI untuk minyak mentah AS adalah komoditas dunia yang paling aktif diperdagangkan.
  - OS_Price, harga jual Crude Oil WTI USD
  - OS_Open, harga pembukaan Crude Oil WTI USD
  - OS_High, harga tertinggi Crude Oil WTI USD
  - OS_Low, harga terendah Crude Oil WTI USD
  - OS_Trend, rekam jejak harga Crude Oil WTI USD
- Silver Futures, perdagangan perak berjangka
  - SF_Price, harga jual Silver Futures
  - SF_Open, harga pembukaan Silver Futures
  - SF_High, harga tertinggi Silver Futures
  - SF_Low, harga terendah Silver Futures
  - SF_Volume, menunjukkan jumlah perdagangan atau transaksi Silver Futures yang terjadi dalam perdagangan di suatu sesi.
  - SF_Trend, rekam jejak harga Silver Futures
- US Bond Rate (10 years), surat berharga berupa pengakuan utang negara Amerika Serikat yang dijamin pembayaran bunga dan pokoknya oleh negara. Di Amerika Serikat, berlaku surat utang negara 10 tahun. 
  - USB_Price, harga jual US Bond Rate
  - USB_Open, harga pembukaan US Bond Rate
  - USB_High, harga tertinggi US Bond Rate
  - USB_Low, harga terendah US Bond Rate
  - USB_Trend, rekam jejak harga US Bond Rate
- Platinum Price, perdagangan harga platinum
  - PLT_Price, harga jual Platinum
  - PLT_Open, harga pembukaan Platinum
  - PLT_High, harga tertinggi Platinum
  - PLT_Low, harga terendah Platinum
  - PLT_Trend, rekam jejak harga Platinum
- Palladium Price, perdagangan harga palladium
  - PLD_Price, harga jual Palladium
  - PLD_Open, harga pembukaan Palladium
  - PLD_High, harga tertinggi Palladium
  - PLD_Low, harga terendah Palladium
  - PLD_Trend, rekam jejak harga Palladium
- Rhodium Price, perdagangan harga rhodium
  - RHO_PRICE, harga jual Rhodium
- US Dollar Index, indeks atau ukuran nilai dolar Amerika Serikat relatif terhadap mata uang asing. Indeks ini dirancang, dipelihara dan diterbitkan oleh ICE (International Exchange, Inc).
  - USDI_Price, harga jual US Dollar Index
  - USDI_Open, harga pembukaan US Dollar Index
  - USDI_High, harga tertinggi US Dollar Index
  - USDI_Low, harga terendah US Dollar Index
  - USDI_Volume, menunjukkan jumlah perdagangan atau transaksi US Dollar Index yang terjadi dalam perdagangan di suatu sesi.
  - USDI_Trend, rekam jejak harga US Dollar Index
- Gold Miners ETF, produk investasi yang diperdagangkan di bursa yang berusaha memberikan hasil investasi yang sesuai dengan pergerakan harga saham perusahaan yang secara aktif terlibat dalam penambangan dan aspek lain dari produksi emas.
  - GDX_Open, harga pembukaan Gold Miners ETF
  - GDX_High, harga tertinggi Gold Miners ETF
  - GDX_Low, harga terendah Gold Miners ETF
  - GDX_Close, harga penutupan Gold Miners ETF
  - GDX_Adj Close, harga penutupan Gold Miners ETF yang telah disesuaikan ketika terjadi aksi korporasi perusahaan, dalam hal ini adalah deviden dan stock split.
  - GDX_Volume, menunjukkan jumlah perdagangan atau transaksi Gold Miners ETF yang terjadi dalam perdagangan di suatu sesi.
- Oil ETF USO, produk yang diperdagangkan di bursa yang berusaha memberikan hasil investasi yang sesuai dengan pergerakan harga harian minyak mentah ringan dan manis WTI. 
  - USO_Open, harga pembukaan Oil ETF USO
  - USO_High, harga tertinggi Oil ETF USO
  - USO_Low, harga terendah Oil ETF USO
  - USO_Close, harga penutupan Oil ETF USO
  - USO_Adj Close, harga penutupan Oil ETF USO yang telah disesuaikan ketika terjadi aksi korporasi perusahaan, dalam hal ini adalah deviden dan stock split. 
  - USO_Volume, menunjukkan jumlah perdagangan atau transaksi Oil ETF USO yang terjadi dalam perdagangan di suatu sesi.

Keterangan:
- ETF, Reksa Dana berbentuk Kontrak Investasi Kolektif yang unit penyertaannya diperdagangkan di Bursa Efek. Meskipun ETF pada dasarnya adalah reksa dana, produk ini diperdagangkan seperti saham-saham yang ada di bursa efek. ETF merupakan penggabungan antara unsur reksa dana dalam hal pengelolaan dana dengan mekanisme saham dalam hal transaksi jual maupun beli.
- Trend, rangkaian rekam jejak harga dalam bentuk grafik dengan kecondongan untuk mengarah ke atas (1) atau ke bawah (0)

Mengecek informasi pada dataset
"""

golds.info()

"""Output kode diatas didapatkan bahwa pada data terdapat:

- Total 58 kolom yang memiliki tipe data float64
- Total 22 kolom yang memiliki tipe data int64
- Besarnya dataset 1.1 MB

Mengecek deskripsi statistik data
"""

golds.describe()

"""Melihat informasi statistik diatas pada masing-masing kolom, antara lain:
- Count  adalah jumlah sampel pada data.
- Mean adalah nilai rata-rata.
- Std adalah standar deviasi.
- Min yaitu nilai minimum setiap kolom. 
- 25% adalah kuartil pertama. Kuartil adalah nilai yang menandai batas interval dalam empat bagian sebaran yang sama. 
- 50% adalah kuartil kedua, atau biasa juga disebut median (nilai tengah).
- 75% adalah kuartil ketiga.
- Max adalah nilai maksimum.

### Menangani Missing Value

Melihat apakah ada nilai yang kosong
"""

golds.isnull().values.any()

"""Output kode diatas "False" yang berarti tidak ada nilai yang kosong

Membuat fitur pada colom menjadi huruf kecil semua
"""

golds.columns = golds.columns.str.lower()

"""Mengambil fitur yang akan digunakan dan berhubungan dengan harga emas"""

golds_new = golds[['open', 'high', 'low', 'close', 'adj close']]
golds_new.head()

"""Melihat kolom pada data yang akan digunakan"""

golds_new.columns

golds_new.describe()

"""Melihat ukuran data yang akan digunakan"""

golds_new.shape

"""Membuat beberapa fungsi yang berguna dalam """

#fungsi untuk menghitung pengembalian/pendapatan harian
def daily_returns(df: pd.DataFrame, column: str) -> pd.DataFrame:
    df[f'{column}_returns'] = df[column] / df[column].shift(1) - 1
    return df

#fungsi untuk menghitung rata-rata bergerak konvergensi divergensi(MACD)
def calculate_macd(df: pd.DataFrame, column: str, nslow: int = 26, nfast: int = 12) -> pd.DataFrame:
    emaslow = df[column].ewm(span=nslow, min_periods=nslow, adjust=True, ignore_na=False).mean()
    emafast = df[column].ewm(span=nfast, min_periods=nfast, adjust=True, ignore_na=False).mean()
    df[f'dif_{column}'] = emafast - emaslow
    
    df[f'macd_{column}'] = df[f'dif_{column}'].ewm(
        span=9, min_periods=9, adjust=True, ignore_na=False
    ).mean()
    return df

#fungsi untuk menghitung Relative Strangth Index (RSI)
def calculate_rsi(df: pd.DataFrame, column: str, periods: int = 14) -> pd.DataFrame:
    delta = df[column].diff()
    up, down = delta.copy(), delta.copy()
    up[up < 0] = 0
    down[down > 0] = 0

    avg_gain = up.ewm(com=periods, adjust=False).mean()
    avg_loss = down.ewm(com=periods, adjust=False).mean().abs()

    df[f'rsi_{column}'] = 100 - 100 / (1 + avg_gain / avg_loss)
    return df

#fungsi untuk menghitung Simple Moving Average (SMA)
def calculate_sma(df: pd.DataFrame, column: str, periods: int = 15) -> pd.Series:
    sma = df[column].rolling(window=periods, min_periods=periods, center=False).mean()
    return sma

#fungsi untuk menghitung Bollinger Bands
def calculate_bands(df: pd.DataFrame, column: str, peroids: int = 15) -> pd.DataFrame:
    std = df[column].rolling(window=peroids, min_periods=peroids, center=False).std()
    sma = calculate_sma(df, column)
    df[f'upper_band_{column}'] = sma + (2 * std)
    df[f'lower_band_{column}'] = sma - (2 * std)
    return df

"""Menghitung pengembalian harian untuk harga penutupan emas yang disesuaikan"""

target_column = 'adj close'
golds_new = daily_returns(golds_new,target_column)

"""Menambahkan indikator teknis untuk harga emas yang disesuaikan"""

golds_new = calculate_rsi(golds_new, target_column)
golds_new = calculate_bands(golds_new, target_column)
golds_new = calculate_macd(golds_new, target_column)
golds_new.head()

"""Melihat grafik data harga emas"""

plt.plot(golds_new[target_column])
plt.title('Gold Price')
plt.show()

golds_new.columns

"""Melihat apakah masih ada data yang kosong pada data yang akan digunakan"""

golds_new.isnull().values.any()

"""Ouput kode diatas "True" menandakan terdapat data yang kosong."""

golds_new.isna().sum()

"""Ouput kode diatas menunjukkan terdapat nilai yang kosong pada fitur adj close_returns, rsi_adj close, upper_band_adj close, lower_band_adj close, dif_adj close, dan macd_adc close.

Karena terdapat data kosong pada data baru tidak terlalu banyak. Sehingga solusi yang dipilih adalah dengan membuang data kosong yang ada.
"""

golds_new.dropna(inplace=True)

"""Melihat apakah masih ada data yang kosong"""

golds_new.isnull().values.any()

"""Ouput kode diatas "False" menandakan sudah tidak ada data yang kosong"""

golds_new.isna().sum()

"""Melihat ukuran data baru yang sudah dibersihkan"""

golds_new.shape

"""### Memvisualisasikan Data

Melihat grafik fitur open
"""

plt.plot(golds_new['open'])
plt.title('open')
plt.show()

"""Melihat grafik fitur high"""

plt.plot(golds_new['high'])
plt.title('high')
plt.show()

"""Melihat grafik fitur low """

plt.plot(golds_new['low'])
plt.title('low')
plt.show()

"""Melihat grafik fitur close"""

plt.plot(golds_new['close'])
plt.title('close')
plt.show()

"""Melihat grafik fitur adj close"""

plt.plot(golds_new['adj close'])
plt.title('adj close')
plt.show()

"""Melihat grafik fitur adj close returns"""

plt.plot(golds_new['adj close_returns'])
plt.title('adj close_returns')
plt.show()

"""Melihat grafik fitur RSI adj close"""

plt.plot(golds_new['rsi_adj close'])
plt.title('rsi_adj close')
plt.show()

"""Melihat grafik fitur upper band adj close"""

plt.plot(golds_new['upper_band_adj close'])
plt.title('upper_band_adj close')
plt.show()

"""Melihat grafik fitur lower band adj close"""

plt.plot(golds_new['lower_band_adj close'])
plt.title('lower_band_adj close')
plt.show()

"""Melihat grafik fitur dif adj close"""

plt.plot(golds_new['dif_adj close'])
plt.title('dif_adj close')
plt.show()

"""Melihat grafik fitur MACD adj close"""

plt.plot(golds_new['macd_adj close'])
plt.title('macd_adj close')
plt.show()

"""## Data preparation

### Mengelompokkan Fitur
"""

feature_column = ['open', 'high', 'low', 'close', 'adj close_returns',
       'rsi_adj close', 'upper_band_adj close', 'lower_band_adj close',
       'dif_adj close', 'macd_adj close']

target_column = pd.DataFrame(golds_new['adj close'])

"""### Pembagian Dataset

Membagi untuk data latih dan data uji
"""

from sklearn.model_selection import train_test_split, TimeSeriesSplit

X = golds_new.drop(['adj close'], axis=1)
y = golds_new['adj close']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=20)

"""Mengurutkan kembali data yang sudah dibagi karena data hasil pembagian berbentuk acak sehingga perlu diurutkan kembali berdasarkan urutan waktu agar data yang akan digunakan sesuai dengan kondisi aslinya"""

X_train = X_train.sort_index(axis=0)
X_test = X_test.sort_index(axis=0)
y_train = y_train.sort_index(axis=0)
y_test = y_test.sort_index(axis=0)

"""Melihat jumlah data yang akan digunakan"""

print('Total keseluruhan data : ', len(X))
print('Total data latih : ', len(X_train))
print('Total data uji : ', len(X_test))

"""### Normalisasi

Melakukan normalisasi pada data yang sudah dibagi dengan tujuan membuat data menjadi memiliki rentang skala yang sama
"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

#Normalisasi pada data latih
X_train_scaler = scaler.fit_transform(X_train[feature_column])
X_train_data = pd.DataFrame(columns=feature_column, data=X_train_scaler, index=X_train.index)

#Normalisasi pada data uji
X_test_scaler = scaler.fit_transform(X_test[feature_column])
X_test_data = pd.DataFrame(columns=feature_column, data=X_test_scaler, index=X_test.index)

X_train = X_train_data
X_test = X_test_data

"""Pada tahap data preparation dilakukan pembagian data terlebih dahulu baru setelah itu dilakukan normalisasi dengan tujuan menghindari kebocoran data pada data uji

## Modeling

### Membuat fungsi untuk melakukan validasi model
"""

def validate_result(model, model_name):
    predicted = model.predict(X_test)
    RSME_score = np.sqrt(mean_squared_error(y_test, predicted))
    print('RMSE: ', RSME_score)
    
    R2_score = r2_score(y_test, predicted)
    print('R2 score: ', R2_score)

    plt.plot(y_test.index, predicted,'r', label='Predict')
    plt.plot(y_test.index, y_test,'b', label='Actual')
    plt.ylabel('Price')
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
    plt.title(model_name + ' Predict vs Actual')
    plt.legend(loc='upper right')
    plt.show()

"""### Pembuatan Model

Decision Tree
"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.dates as mdates
models = {}

model1 = DecisionTreeRegressor(random_state=0)
hist_model1 = model1.fit(X_train, y_train)

validate_result(hist_model1, 'Decision Tree Regression')
models['Decision Tree Regression'] = hist_model1

"""Support Vector Regression"""

from sklearn.svm import SVR

model2 = SVR(kernel='linear')
hist_model2 = model2.fit(X_train, y_train)
validate_result(hist_model2, 'Linear SVR')
models['SVR'] = hist_model2

"""Random Forest"""

from sklearn.ensemble import RandomForestRegressor

model3 = RandomForestRegressor(n_estimators=50, random_state=0)
hist_model3 = model3.fit(X_train, y_train)
validate_result(hist_model3, 'Random Forest')
models['Random Forest'] = hist_model3

"""LassoCV & RidgeCV"""

from sklearn.linear_model import LassoCV
from sklearn.linear_model import RidgeCV

model4 = LassoCV(n_alphas=1000, max_iter=3000, random_state=0)
model5 = RidgeCV(gcv_mode='auto')

hist_model4 = model4.fit(X_train, y_train)
validate_result(hist_model4,'LassoCV')
models['LassoCV'] = hist_model4

hist_model5 = model5.fit(X_train, y_train)
validate_result(hist_model5,'RidgeCV')
models['RidgeCV'] = hist_model5

"""Gradient Boosting Regressor"""

from sklearn.ensemble import GradientBoostingRegressor
model6 =GradientBoostingRegressor(n_estimators=70, learning_rate=0.1, max_depth=4, random_state=0, loss='ls')
hist_model6 = model6.fit(X_train,y_train)
validate_result(hist_model6,'GB')
models['GB'] = hist_model6

"""Stochastic Gradient Descent"""

from sklearn.linear_model import SGDRegressor
model7 =SGDRegressor(max_iter=1000, tol=1e-3,loss='squared_epsilon_insensitive',penalty='l1',alpha=0.1)
hist_model7 = model7.fit(X_train,y_train)
validate_result(hist_model7,'SGD')
models['SGD'] = hist_model7

"""## Evaluation

Dilakukan prediksi pada data uji/test menggunakan model-model yang sudah dibuat
"""

RMSE_scores = {}
def model_review(models):
    fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(16, 16))

    #plot block
    ax_x = 0
    ax_y = 0
    #plot model
    for name, model in models.items():
        predicted = model.predict(X_test)
        RSME_score = np.sqrt(mean_squared_error(y_test, predicted))

           
        axes[ax_x][ax_y].plot(y_test.index, predicted,'r', label='Predict')
        axes[ax_x][ax_y].plot(y_test.index, y_test,'b', label='Actual')
        axes[ax_x][ax_y].xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        axes[ax_x][ax_y].xaxis.set_major_locator(mdates.MonthLocator())
        axes[ax_x][ax_y].set_ylabel('Price')
        axes[ax_x][ax_y].set_title(name + "'s RMSE Error: " +"{0:.2f}".format(RSME_score))
        axes[ax_x][ax_y].legend(loc='upper right')
        RMSE_scores[name] = RSME_score
        if ax_x <=2:
            if ax_y < 2:
                ax_y += 1
            else:
                ax_x += 1
                ax_y = 0
    plt.show()
model_review(models)

"""Membandingkan nilai RMSE yang diperoleh setiap model pada data uji/test

"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
# %matplotlib inline

model_names = []
model_values = []
for name, value in RMSE_scores.items():
    model_names.append(name)
    model_values.append(value)

model_values = np.array(model_values)
model_names = np.array(model_names)

indices = np.argsort(model_values)
columns = model_names[indices[:8]]
values = model_values[indices][:8]

fig = plt.figure(figsize = (16,8))
plt.bar(columns, values ,width = 0.6, align="center", color = '#ff00c1')
plt.xticks(columns, columns)
plt.xlabel('Model')
plt.ylabel('RMSE')
plt.title('RMSE compare')   
plt.show()

"""Hasil dari model yang sudah dibuat"""

print('Peringkat dari Model yang telah dibuat')
results = [['Support Vector Regressor',0.399, 0.999],
           ['Gradient Boosting', 0.411, 0.999],
           ['RidgeCV', 0.412, 0.999],
           ['LassoCV',  0.414, 0.999], 
           ['Random Forest', 0.418, 0.999],
           ['Decision Tree Regression', 0.421, 0.999],
           ['Stochastic Gradient Descent', 0.792, 0.997]]
      
results_df = pd.DataFrame(results, columns=['Model Type', 'RMSE', 'R2 Score'])
results_df

"""Dari hasil yang didapatkan dari pembuatan beberapa model diatas maka didapatkan nilai RMSE dan R2 Score seperti diatas. Sehingga dapat digunakan model dengan nilai RMSE terendah dan R2-Score tertinggi untuk digunakan sebagai model prediksi harga emas. Model yang mungkin cocok untuk digunakan adalah Support Vector Regressor, Gradient Boosting dan RidgeCV. """